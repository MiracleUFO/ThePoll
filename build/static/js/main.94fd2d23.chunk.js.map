{"version":3,"sources":["components/header.js","components/question.js","components/displayQuestions.js","App.js","serviceWorker.js","index.js"],"names":["Header","to","React","Component","Question","state","question","options","i","formWrapRef","createRef","formRef","divRef","errorRef","answerRef","handleSubmit","e","preventDefault","length","props","addQuestions","current","style","display","handleBlur","target","value","setState","setAttribute","handleBlurOptions","option","displayForm","childNodes","addOption","input","document","createElement","appendChild","correctOpt","this","Math","floor","random","optionList","map","index","key","className","ref","onSubmit","type","placeholder","onBlur","id","onClick","color","Display","foo","arr","prev","a","b","sort","push","questionList","questions","popularity","displayQuestion","displayPoplarity","App","questionArr","exact","path","render","Boolean","window","location","hostname","match","ReactDOM","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.94fd2d23.chunk.js","sourcesContent":["import React from 'react';\r\nimport {NavLink} from 'react-router-dom';\r\n\r\nclass Header extends React.Component {\r\nrender() { \r\n\t\treturn (\r\n\t\t\t<header>\r\n\t\t\t   <h1>ThePoll</h1>\r\n\t\t\t   <button><NavLink to='/'>Ask a question</NavLink></button>\r\n\t\t    </header>\r\n\t\t)\t\r\n\t}\r\n\t\r\n}\r\n\r\nexport default Header","import React from 'react';\r\nimport {NavLink} from 'react-router-dom';\r\n\r\nclass  Question extends React.Component {\r\n\tstate = {\r\n\t\t\tquestion:null,\r\n\t\t\toptions:[],\r\n\t\t\ti:0,\r\n\t\t\tformWrapRef: React.createRef(),\r\n\t\t\tformRef:React.createRef(),\r\n\t\t\tdivRef: React.createRef(),\r\n\t\t\terrorRef:React.createRef(),\r\n\t\t\tanswerRef: React.createRef()\r\n\t}\r\n\r\n\thandleSubmit = (e) => {\r\n\t\te.preventDefault(); \r\n\t\tif (this.state.question && this.state.options.length>0) {\r\n\t\t\tthis.props.addQuestions(this.state.question);\r\n\t\t\tthis.state.formWrapRef.current.style.display = 'none';\r\n\t\t\tthis.state.answerRef.current.style.display = 'block';\r\n\t\t} else { \r\n\t\t\tthis.state.errorRef.current.style.display = 'block'\t\r\n\t\t}\r\n\t}\r\n\r\n\thandleBlur = (e) => {\r\n\t\tif (e.target.value) {\r\n\t\t\tthis.setState({question:e.target.value});\r\n\t\t} else {e.target.setAttribute('placeholder', 'Input a question')}\r\n\t\t\r\n\t}\r\n\r\n \thandleBlurOptions = (e) => {\r\n \t\tlet option = [...this.state.options, e.target.value];\r\n \t\tif (e.target.value) {\r\n \t\t\tthis.setState({options:option});\r\n \t\t}\r\n \t}\r\n\r\n \tdisplayForm = (e) => {\r\n \t\tthis.state.formWrapRef.current.style.display = 'block';\r\n \t\tthis.state.answerRef.current.style.display = 'none';\r\n \t\tthis.setState({options:[]});\r\n \t\tfor (let i=0; i<this.state.divRef.current.childNodes.length; i++) {\r\n \t\t\tthis.state.divRef.current.childNodes[i].value = '';\r\n \t\t}\r\n \t\tthis.state.formRef.current.childNodes[0].value = '';\r\n \t\tthis.setState({question:''})\r\n \t}\r\n\r\n\taddOption = (e) => {\r\n\t\tconst input = document.createElement('input');\r\n\t\tif (this.state.i===0) {\r\n\t\t\tinput.setAttribute('placeholder', 'E:');\r\n\t\t}\r\n\t\tif (this.state.i===1) {\r\n\t\t\tinput.setAttribute('placeholder', 'F:');\r\n\t\t} \r\n\t\tif (this.state.i===2) {\r\n\t\t\tinput.setAttribute('placeholder', 'G:');\r\n\t\t}\r\n\t\t\tif (this.state.i>2) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\tthis.state.divRef.current.appendChild(input);\r\n\t\tthis.state.i++;\r\n\t}\r\n\r\n\trender() {\r\n\t\tlet correctOpt = this.state.options[Math.floor(Math.random()*this.state.options.length)];\r\n\t\tconst optionList = this.state.options.map((option, index) => {\r\n\t\tif (option !== correctOpt) {\r\n\t\treturn (<div key={index}>{option}</div>)\r\n\t\t} else {return (<div className='green' key={index}>{option}</div>)} \r\n\t\t\t});\r\n\r\n\t\treturn (\r\n\t\t<section>\r\n\t\t\t<div ref={this.state.formWrapRef}>\r\n\t\t    \t<form onSubmit={this.handleSubmit} ref={this.state.formRef}>\r\n\t\t        \t<input type='text' placeholder='Question:' onBlur={this.handleBlur} id='question'/>\r\n\t\t        \t<div id='options' ref={this.state.divRef}>\r\n\t\t        \t\t<input type='text' placeholder='A:' onBlur={this.handleBlurOptions}/>\r\n\t\t        \t\t<input type='text' placeholder='B:' onBlur={this.handleBlurOptions}/>\r\n\t\t        \t\t<input type='text' placeholder='C:'  onBlur={this.handleBlurOptions}/>\r\n\t\t        \t\t<input type='text' placeholder='D:'  onBlur={this.handleBlurOptions}/>\r\n\t\t        \t</div>  \r\n\t\t\t\t</form>\r\n\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<button onClick={this.addOption} id=\"buttonOption\">+Option</button>\r\n\t\t\t\t\t<button onClick={this.handleSubmit}>See answer</button>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t<p ref={this.state.errorRef} style={{display:'none', color:'red'}}>Pls input something in the fields.</p>\r\n\t\t\t</div>\r\n\r\n\t\t    <div ref={this.state.answerRef} style={{display:'none'}}>\r\n\t\t        \t{optionList}\r\n\t\t        \t<button onClick={this.handleSubmit}>Toggle answer</button>\r\n\t\t        \t<button onClick={this.displayForm}>Ask another question</button>\r\n\t\t        \t<button><NavLink to='/displayQuestion'>View Questions</NavLink></button>\r\n\t\t        \t\r\n\t\t    </div>\r\n\t\t</section>\r\n\t\t);\r\n}}\r\n\t\r\nexport default Question","import React from 'react';\r\n\r\nclass Display extends React.Component {\r\n\trender () {\r\n\t\tfunction foo (arr) {\r\n\t\t\tlet a = [], b = [], prev;\r\n\t\t\tarr.sort();\r\n\t\t\tfor (let i = 0;i  < arr.length; i++) {\r\n\t\t\t\tif (arr[i] !== prev) {\r\n\t\t\t\t\ta.push(arr[i]);\r\n\t\t\t\t\tb.push(1);\r\n\t\t\t\t} else {b[b.length-1]++}\r\n\t\t\t\tprev = arr[i];\r\n\t}\r\n\t\treturn [a,b]\r\n\t}\r\n\r\n\tlet questionList = foo (this.props.questions)[0];\r\n\tlet popularity = foo (this.props.questions)[1];\r\n\tlet displayQuestion = questionList.map((question, index) => {\r\n\t\treturn (<div key={index}>{question} ?</div>);\t\t\r\n\t\t});\r\n\tlet displayPoplarity = popularity.map((popularity, index) => {\r\n\t\treturn (<div key={index} >{popularity}</div>)\r\n\t\t});\r\n\t\r\n\treturn (\r\n\t\t<div id='displayQuestions'>\r\n\t\t<span><span className='bold'>Questions</span>{displayQuestion}</span><span className='green'><span>No. of times asked</span>{displayPoplarity}</span>\r\n\t\t</div>\r\n\t\t)\r\n\t}\t\r\n}\r\n\t\r\n\r\nexport default Display\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React from 'react';\nimport {BrowserRouter, Route} from 'react-router-dom';\nimport Header from './components/header'\nimport Question from './components/question';\nimport Display from './components/displayQuestions';\n\nclass App extends React.Component {\n  state = {\n    questions:[]\n  } \n  \n  addQuestions = (question) => {\n    let questionArr = [...this.state.questions, question];\n    this.setState({questions:questionArr});\n}\n\n  render () {\n    return (\n      <BrowserRouter>\n      <div>\n        <Header/>\n        <Route exact path='/' render= {(props) => <Question {...props} addQuestions={this.addQuestions}/>} />\n        <Route exact path='/displayQuestion' render= {(props) => <Display {...props} questions={this.state.questions}/>} />\n      </div>\n      </BrowserRouter>\n      )\n  }\n}\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';      \nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\nserviceWorker.unregister();\n"],"sourceRoot":""}